using Sharpmake;
using System.IO;
using System.Text.Json;
using System.Collections.Generic;
using System.Linq;
using System.Text;

[Generate]
public class RexEngine : EngineProject
{
  private string MemoryTagsHeaderFile;
  private string FileSystemMountHeaderFile;

  public RexEngine() : base()
  {
    // The name of the project in Visual Studio. The default is the name of
    // the class, but you usually want to override that.
    Name = "RexEngine";
    GenerateTargets();

    string ThisFileFolder = Path.GetDirectoryName(Utils.CurrentFile());
    SourceRootPath = ThisFileFolder;

    SourceFilesExcludeFromJumboRegex.Add("new_delete.cpp"); // needs to be excluded to avoid linker issues

    string relative_source_path = Util.PathGetRelative(Path.Combine(Globals.SourceRoot), SourceRootPath);
    GenerationConfigPath = Path.Combine(Globals.Root, "config", relative_source_path, "generation.json");
    MemoryTagsHeaderFile = Path.Combine(SourceRootPath, "include", "rex_engine", "memory", "memory_tags.h");
    FileSystemMountHeaderFile = Path.Combine(SourceRootPath, "include", "rex_engine", "filesystem", "mount_roots.h");

    // create it here so it's added to the project in case it didn't exist yet
    TouchGenerationFile(MemoryTagsHeaderFile);
    TouchGenerationFile(FileSystemMountHeaderFile);
  }

  public override void Configure(RexConfiguration conf, RexTarget target)
  {
    base.Configure(conf, target);

    conf.Output = Configuration.OutputType.Lib;

    conf.AddPublicDependency<RexStdExtra>(target, DependencySetting.Default);
    conf.AddPublicDependency<GLM>(target, DependencySetting.Default);

    if (GenerateSettings.UnitTestsEnabled)
    {
      conf.AddPublicDependency<RexStdTest>(target, DependencySetting.Default);
    }

    switch (target.Config)
    {
      case Config.debug:
      case Config.debug_opt:
        conf.add_public_define("REX_ENABLE_MEM_TRACKING");
        goto case Config.address_sanitizer;
      case Config.address_sanitizer:
      case Config.undefined_behavior_sanitizer:
      case Config.fuzzy:
        conf.add_public_define("REX_DEBUG");
        break;
    }

    switch (conf.Platform)
    {
      case Platform.win32:
        conf.add_public_define("REX_PLATFORM_X86");
        conf.add_public_define("REX_PLATFORM_WINDOWS");
        break;
      case Platform.win64:
        conf.add_public_define("REX_PLATFORM_X64");
        conf.add_public_define("REX_PLATFORM_WINDOWS");
        break;
      case Platform.linux:
        conf.add_public_define("REX_PLATFORM_LINUX");
        break;
      default:
        break;
    }

    conf.add_public_define("REX_API_OPENGL");
  }

  public override void AfterConfigure()
  {
    base.AfterConfigure();

    WriteMemoryTagsHeaderFile();
    WriteMountRootsHeaderFile();
  }

  private void TouchGenerationFile(string filePath)
  {
    if (File.Exists(filePath))
    {
      FileStream tmp = File.Open(filePath, FileMode.Truncate);
      tmp.Close();
    }
    else
    {
      FileStream tmp = File.Create(filePath);
      tmp.Close();
    }
  }

  private void WriteMemoryTagsHeaderFile()
  {
    StringBuilder sb = new StringBuilder();
    WriteCustomGenerationHeader(sb);

    sb.AppendLine("  enum class MemoryTag");
    sb.AppendLine("  {");
   
    foreach (var project_tags in GenerateSettings.MemoryTags)
    {
      sb.AppendLine($"    // memory tags for {project_tags.Key}");

      foreach (string tag in project_tags.Value)
      {
        sb.AppendLine($"    {tag},");
      }
    }

    sb.AppendLine("  };");

    WriteCustomGenerationFooter(sb);
    WriteToDisk(sb, MemoryTagsHeaderFile);
  }

  private void WriteMountRootsHeaderFile()
  {
    StringBuilder sb = new StringBuilder();
    WriteCustomGenerationHeader(sb);

    sb.AppendLine("  enum class MountRoot");
    sb.AppendLine("  {");

    foreach (var project_tags in GenerateSettings.MountRoots)
    {
      sb.AppendLine($"    // mount roots for {project_tags.Key}");

      foreach (string tag in project_tags.Value)
      {
        sb.AppendLine($"    {tag},");
      }
    }

    sb.AppendLine("  };");

    WriteCustomGenerationFooter(sb);
    WriteToDisk(sb, FileSystemMountHeaderFile);
  }

  private void WriteCustomGenerationHeader(StringBuilder sb)
  {
    sb.AppendLine("#pragma once");
    sb.AppendLine("");
    sb.AppendLine("// DON'T EDIT - This file is auto generated by sharpmake");
    sb.AppendLine("// NOLINTBEGIN");
    sb.AppendLine("");
    sb.AppendLine("namespace rex");
    sb.AppendLine("{");
  }

  private void WriteCustomGenerationFooter(StringBuilder sb)
  {
    sb.AppendLine("} // namespace rex");
    sb.AppendLine("// NOLINTEND");
  }

  private void WriteToDisk(StringBuilder sb, string filePath)
  {
    FileStream stream = File.Open(filePath, FileMode.Truncate);

    byte[] bytes = Encoding.ASCII.GetBytes(sb.ToString());
    stream.Write(bytes, 0, sb.Length);
    stream.Close();

  }
}